import collections
class UnionFind:
    def __init__(self, n):
        self.parent = list(range(n))
        self.size = [1]*n
        
    def find(self, x):
        if self.parent[x]==x: return x
        self.parent[x] = self.find(self.parent[x])
        return self.parent[x]
            
    def union(self, p, q):
        root_p, root_q = map(self.find, [p, q])
        if root_p==root_q: return
        small, big = sorted([root_p, root_q], key = lambda x: self.size[x])
        self.parent[small]=big
        self.size[big]+=self.size[small]

        
class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        uf = UnionFind(n)
        
        # finding all the connected components
        for i in range(n):
            for j in range(n):
                if graph[i][j]: uf.union(i, j)
        
        # Something like component to number of infected nodes
        # {
        #     comp1: 2, comp2: 1, comp3: 3
        # }
        infected = collections.defaultdict(int)
        for i in initial:
            infected[uf.find(i)]+=1
        
        # Now we find, which initial node to remove, such that its component has only 1 node, and max number of nodes in that component so as to save majority of nodes
        max_size, candidate = 0, min(initial)
        for i in initial:
            count = infected[uf.find(i)]
            if count != 1: continue
            
            size = uf.size[uf.find(i)]
            if size>max_size:
                max_size = size
                candidate = i
            elif size==max_size and i<candidate:
                candidate = i
        return candidate
        